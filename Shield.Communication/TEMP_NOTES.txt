NetworkInformation.GetConnectionProfiles()[0]
{Windows.Networking.Connectivity.ConnectionProfile}
    IsWlanConnectionProfile: false
    IsWwanConnectionProfile: false
    NetworkAdapter: {Windows.Networking.Connectivity.NetworkAdapter}
    NetworkSecuritySettings: {Windows.Networking.Connectivity.NetworkSecuritySettings}
    ProfileName: "Bluetooth Network Connection"
    ServiceProviderGuid: null
    WlanConnectionProfileDetails: null
    WwanConnectionProfileDetails: null
    Native View: To inspect the native object, enable native code debugging.

NetworkInformation.GetConnectionProfiles()[1].NetworkAdapter
{Windows.Networking.Connectivity.NetworkAdapter}
    IanaInterfaceType: 6
    InboundMaxBitsPerSecond: 1000000000
    NetworkAdapterId: {26ca7e77-a759-466b-b223-805c5a373e61}
    NetworkItem: {Windows.Networking.Connectivity.NetworkItem}
    OutboundMaxBitsPerSecond: 1000000000
    Native View: To inspect the native object, enable native code debugging.
listener.BindServiceNameAsync(port.ToString(), SocketProtectionLevel.PlainSocket, NetworkInformation.GetConnectionProfiles()[1].NetworkAdapter)
'listener.BindServiceNameAsync(port.ToString(), SocketProtectionLevel.PlainSocket, NetworkInformation.GetConnectionProfiles()[1].NetworkAdapter)' threw an exception of type 'System.Exception'
    Data: {System.Collections.ListDictionaryInternal}
    HResult: -2147014874
    HelpLink: null
    InnerException: null
    Message: "An invalid argument was supplied.\r\n\r\nAn invalid argument was supplied.\r\n"
    Source: ""
    StackTrace: "   at Windows.Networking.Sockets.StreamSocketListener.BindServiceNameAsync(String localServiceName, SocketProtectionLevel protectionLevel, NetworkAdapter adapter)"
listener.BindServiceNameAsync(port.ToString(), SocketProtectionLevel.PlainSocket, NetworkInformation.GetConnectionProfiles()[1].NetworkAdapter)


///


#include <SPI.h>
#include <WiFi.h>
#include "WiFiStream.h"

char ssid[] = "Win10JG";     //  your network SSID (name) 
char pass[] = "abcd1234";    // your network password
int status = WL_IDLE_STATUS;     // the Wifi radio's status
WiFiStream wifi;

void printMacAddress() {
  // the MAC address of your Wifi shield
  byte mac[6];                     

  // print your MAC address:
  WiFi.macAddress(mac);
  Serial.print("MAC: ");
  Serial.print(mac[5],HEX);
  Serial.print(":");
  Serial.print(mac[4],HEX);
  Serial.print(":");
  Serial.print(mac[3],HEX);
  Serial.print(":");
  Serial.print(mac[2],HEX);
  Serial.print(":");
  Serial.print(mac[1],HEX);
  Serial.print(":");
  Serial.println(mac[0],HEX);
}

void setup() {
  // initialize serial:
  Serial.begin(9600);

  // attempt to connect using WPA2 encryption:
  Serial.println("Attempting to connect to WPA network...");
  
  status = wifi.begin(ssid, pass, 1235); 
  
  //status = WiFi.begin(ssid, pass); 

  // if you're not connected, stop here:
  if ( status != WL_CONNECTED) { 
    Serial.println("Couldn't get a wifi connection");
    while(true);
  } 
  // if you are connected, print out info about the connection:
  else {
    Serial.println("Connected to network");
    
    IPAddress remote(192,168,173,1);
    
    if (wifi.client.connect(remote, 1235)) {
      Serial.println("Connected to remote machine");
    } else {
      Serial.println("Not connected to remote machine");
    }
  }
  
  //printMacAddress();
}

void loop() {
  // do nothing
}

/////-------------------------/////
/*
    Copyright(c) Microsoft Open Technologies, Inc. All rights reserved.

    The MIT License(MIT)

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files(the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions :

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
*/

#include <ArduinoJson.h>
#include <SPI.h>
#include <WiFi.h>
#include "WiFiStream.h"

#include <VirtualShield.h>
#include <Text.h>

char ssid[] = "Win10JG";     //  your network SSID (name) 
char pass[] = "abcd1234";    // your network password
int status = WL_IDLE_STATUS;     // the Wifi radio's status
WiFiStream wifi;

VirtualShield shield;	          // identify the shield
Text screen = Text(shield);	  // connect the screen

void connectToWifi() 
{
    Serial.begin(9600);
    Serial.println("starting");
    status = wifi.begin(ssid, pass, 1235); 
    wifi.setName("Jimduino", 8);
  
    //status = WiFi.begin(ssid, pass); 

    // if you're not connected, stop here:
    if ( status != WL_CONNECTED) { 
      Serial.println("Couldn't get a wifi connection");
      while(true);
    } 
    // if you are connected, print out info about the connection:
    else {
      Serial.println("Connected to network");
      IPAddress ip = WiFi.localIP();
      Serial.println(ip);
    }
}

void refresh(ShieldEvent* event) 
{
    // clears the screen
	screen.clear();
Serial.print("refreshed");
}

int y = 0;

void sendBeacon() {
  wifi.broadcastBeacon(1235);
}

void screens(ShieldEvent* event) {
}

void connected1(ShieldEvent* event) {
  Serial.print("connected");
}

void setup()
{
    connectToWifi();    
    shield.setStream( &wifi ); 
    
    screen.setOnEvent(screens);
    shield.setOnConnect(connected1);
    shield.setOnRefresh(refresh);
  
    // begin Virtual Shields for Arduino communication. You may specify a baud rate as a parameter, default is 115200
    shield.begin();
    //shield.whenDisconnected(sendBeacon);
}

void loop()
{
    shield.checkSensors();
    sendBeacon();
    screen.printAt(y, "Hello Virtual Shields123");	 
    y++;
    if (y > 10)
    {
      y = 0;
    }
    delay(1000);
}													